// Mocks generated by Mockito 5.4.4 from annotations
// in pragma_cats/test/httpService_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pragma_cats/data/services/http_service.dart' as _i4;
import 'package:pragma_cats/models/request_model.dart' as _i5;
import 'package:pragma_cats/models/response_model.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponseModel_1 extends _i1.SmartFake implements _i3.ResponseModel {
  _FakeResponseModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i4.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  dynamic getMethod(_i5.HTTPMethods? method) =>
      super.noSuchMethod(Invocation.method(
        #getMethod,
        [method],
      ));

  @override
  _i6.Future<_i3.ResponseModel?> get(_i5.RequestModel? req) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [req],
        ),
        returnValue: _i6.Future<_i3.ResponseModel?>.value(),
      ) as _i6.Future<_i3.ResponseModel?>);

  @override
  _i6.Future<_i3.ResponseModel?> post(_i5.RequestModel? req) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [req],
        ),
        returnValue: _i6.Future<_i3.ResponseModel?>.value(),
      ) as _i6.Future<_i3.ResponseModel?>);

  @override
  _i6.Future<_i3.ResponseModel?> put(_i5.RequestModel? req) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [req],
        ),
        returnValue: _i6.Future<_i3.ResponseModel?>.value(),
      ) as _i6.Future<_i3.ResponseModel?>);

  @override
  _i6.Future<_i3.ResponseModel?> del(_i5.RequestModel? req) =>
      (super.noSuchMethod(
        Invocation.method(
          #del,
          [req],
        ),
        returnValue: _i6.Future<_i3.ResponseModel?>.value(),
      ) as _i6.Future<_i3.ResponseModel?>);

  @override
  _i6.Future<_i3.ResponseModel> sendRequest(_i5.RequestModel? req) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRequest,
          [req],
        ),
        returnValue: _i6.Future<_i3.ResponseModel>.value(_FakeResponseModel_1(
          this,
          Invocation.method(
            #sendRequest,
            [req],
          ),
        )),
      ) as _i6.Future<_i3.ResponseModel>);
}
